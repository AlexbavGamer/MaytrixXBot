<%- contentFor('body') %>
<link rel="stylesheet" data-name="vs/editor/editor.main" href="/node_modules/monaco-editor/min/vs/editor/editor.main.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<table>
    <tr>
        <td>
            Nome do Arquivo:
        </td>
        <br>
        <td>
            <input type="text" id="filename" name="filename">
        </td>
        <td>
            <label for="guilds"><span>Seleciona a</span> <b>Guilda</b>:</label>
            <select id="guilds" name="guilds">
                <% data.guilds.forEach(guild => { %>
                    <option value="<%=guild.id%>"><%=guild.name%></option>
                <% }); %>
            </select>
        </td>

        <td>
            <input type="checkbox">
                Comando Global
            </input>
            <input type="button" value="Criar" onclick="createCommand()">
        </td>
        <div id="container" style="
        width: 100%;
        height: 78.5vh;
        border:1px solid grey;
        "></div>
    </tr>
</table>
<script src="/node_modules/monaco-editor/min/vs/loader.js"></script>
<script src="/js/ejs.min.js"></script>
<script>
    
    function runEval()
    {
        $.ajax({ url: '/runeval', type: 'POST', data: {
            codes: editor.getModel().getLinesContent()
        }});
    }

    function createCommand()
    {
        $.ajax({ url: '/newcommand', type: 'POST', data:{
            code: editor.getModel().getLinesContent(),
            guildid: document.getElementById('guilds').value,
            filename: document.getElementById("filename").value,
            enabled: true
        }});
    }
    require.config({
        baseUrl: '/node_modules/monaco-editor/min'
    });
    var editor;
    require(['vs/editor/editor.main'], function()
    {

        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES6,
            allowNonTsExtensions: true,
            esModuleInterop: true,
        });

        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES2016,
            allowNonTsExtensions: true,
            module: monaco.languages.typescript.ModuleKind.CommonJS,
            noEmit: true,
            esModuleInterop: true,
        });
        var parsed = {
            key: "",
            value: ""
        };
        <% data.dependencies.forEach((value, key) => { %>
            parsed.value = <%- JSON.stringify(value) %>
            parsed.key = <%- JSON.stringify(key) %>
            monaco.languages.typescript.typescriptDefaults.addExtraLib(parsed.value, parsed.key);
        <% }); %>


        var jsCode = `<%- data.command %>`;
        editor = monaco.editor.create(document.getElementById("container"), {
            model: monaco.editor.createModel(jsCode,"typescript"),
            theme: "vs-dark",
            autoIndent: true
        });

        editor.addAction({
            id: "Restart Template",
            label: "Restart",
            run: (ed) => {
                ed.setValue(`<%- data.command %>`);
            },
            keybindings:
            [
                monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_R )
            ]
        });
        editor.addAction({
            id: "Save",
            label: "Save Command",
            run: (ed) => {
                alert("Não é possivel salvar ainda. <%= req.user.username %>");
            },
            keybindings:
            [
                monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S )
            ]
        });

        editor.addAction({
            id: "Run Code", 
            label: "Run any code",
            run: (ed) => {
                runEval();
            },
            keybindings: 
            [
                monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_B)
            ],
        });
        document.getElementById("filename").value = getCommandName();
        editor.onDidChangeModelContent(e => {
            document.getElementById("filename").value = getCommandName();
        });
        editor.addAction({
            id: "get-mirror-model-uris",
            label: "Debug monaco: Get worker models",
            run: () => {
                const modelUri = editor.getModel().uri.toString();
                const ts = monaco.languages.typescript;
                ts.getTypeScriptWorker().then(worker => {
                    return worker(modelUri);
                }).then(worker => {
                    return worker.getScriptFileNames();
                }).then(files => {
                    alert("Worker file names:\n" + files.join("\n"));
                });
            }
        });

    });
</script>

<script src="/js/monaco_util.js"></script>